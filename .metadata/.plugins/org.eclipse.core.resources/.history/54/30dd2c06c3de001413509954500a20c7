package third;

public class Solution {
	//O(1)的空间占有
	//随机的对某个位置来转移，若不用转移，则随机转移到另一个位置，一共进行数组长度次数的转移，能保证每次都处理不同的位置
	public void rotate(int[] nums, int k) {
		if(nums.length <= 1){
            return;
        }
        //step each time to move
        int step = k % nums.length;
        reverse(nums,0,nums.length - 1);
        reverse(nums,0,step - 1);
        reverse(nums,step,nums.length - 1);
	}
	
	//reverse int array from n to m
    public void reverse(int[] nums, int n, int m){
        while(n < m){
            nums[n] ^= nums[m];
            nums[m] ^= nums[n];
            nums[n] ^= nums[m];
            n++;
            m--;
        }
    }
	
	public static void main(String[] args) {
		int[] number = {1,2,3,4,5,6,7};
		Solution solution = new Solution();
		solution.rotate(number, 2);
		for (int x : number) {
			System.out.println(x);
		}
	}
}
